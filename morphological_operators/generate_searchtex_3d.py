#!python3
#
# This script generates 3D search textures for morphological antialiasing.
# It is based on the 2D version from the SMAA project.
#
# Requires:
#   - Python 3.3.2: http://www.python.org/
#   - Pillow 2.1.0: https://pypi.python.org/pypi/Pillow/2.1.0#downloads
#   - numpy: pip install numpy

from PIL import Image
import numpy as np

# Texture size
SIZE_3D = 16

def cpp_header(volume, name, plane):
    """Writes a 3D texture volume to a C++ header file."""
    filename = f'SearchTex_3D_{plane}.h'
    var_name = f'searchTexBytes_3D_{plane}'

    with open(f'morphological_operators/{filename}', 'w') as f:
        f.write(f"// This file is generated by generate_searchtex_3d.py\n")
        f.write(f"const unsigned int {var_name}_size = {volume.size};\n")
        f.write(f"static const unsigned char {var_name}[] = {{\n")

        f.write("   ")
        count = 0
        for val in np.nditer(volume):
            f.write(f"0x{int(val):02x},")
            count += 1
            if count % 16 == 0:
                f.write("\n   ")

        f.seek(f.tell() - 1) # Remove last comma
        f.write("\n};\n")

def generate_3d_search_texture_for_plane(plane='XY'):
    """
    Generates a 3D search texture for a specific plane.
    This simplified version calculates the distance to the edge of the volume.
    """
    print(f"Generating 3D Search Texture for {plane} plane...")

    volume = np.zeros((SIZE_3D, SIZE_3D, SIZE_3D), dtype=np.uint8)

    for z in range(SIZE_3D):
        for y in range(SIZE_3D):
            for x in range(SIZE_3D):
                if plane == 'XY':
                    # Search along X axis
                    val = x
                elif plane == 'YZ':
                    # Search along Y axis
                    val = y
                elif plane == 'XZ':
                    # Search along Z axis
                    val = z

                volume[z, y, x] = np.clip(val, 0, 255)

    cpp_header(volume, "SearchTex3D", plane)
    print(f"Finished generating 3D Search Texture for {plane} plane.")

if __name__ == '__main__':
    # We need to install numpy first
    try:
        import numpy
    except ImportError:
        print("Numpy not found. Please install it using 'pip install numpy'")
        exit()

    generate_3d_search_texture_for_plane('XY')
    generate_3d_search_texture_for_plane('YZ')
    generate_3d_search_texture_for_plane('XZ')
